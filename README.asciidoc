= ESPEASY et Domogik
:toc:

{nbsp}

== Description


L'link:http://fabacademy.org/archives/2015/doc/networking-esp8266.html[ESP8266] est un petit module Wifi très bon marché disponible sur différentes cartes/modules fourni avec différents firmware permettant de le programmer 
avec des commandes AT, en Lua, python, avec l'IDE Arduino, ESPEasy ...

Le modèle générique ESP-01:

image::images/esp8266-pinout.png[caption="", title="", alt="", width="300", link="images/esp8266-pinout.png"]

{nbsp}

== ESP Easy

{nbsp}

=== Le firmware

ESPeasy (http://www.esp8266.nu), firmware polyvalent pour les différents types d’ESP8266.

Une fois chargé, vous disposez d’une page web d’administration qui permet de configurer les capteurs/actionneurs de l’ESP 
et aussi son interaction avec un logiciel de domotique.

Le firmware ESP Easy est actuellement à la version **R78** (mai 2016). Il est possible de piloter differents capteurs gérer par le firmware en utlisant uniquement l'interface web de l'ESP.

Liste non exaustive de capteurs/senseurs supportés (http://www.esp8266.nu/index.php/Main_Page#Applications:

* DHT22
* BMP180
* PCF8574 / MCP23017
* PCF8591
* Dallas DS18b20 
* HC-SR04
* Switch / Relais
* GPIO
* LCD
* ...


{nbsp}

=== Programmation d'un ESP-01 avec le firmware espeasy

==== Shéma de cablage d'un esp8266-01 pour programmation
image::images/esp8266-01_dht22.png[caption="", title="", alt="", width="800", link="images/esp8266-01_dht22.png"]

Un senseur **DHT22** est relié à l'ESP-01 pour le premier test.

image::images/esp8266-01_dht22_ph.jpg[caption="", title="", alt="", width="600", link="images/esp8266-01_dht22_ph.jpg"]

{nbsp}

WARNING: Le circuit **ESP8266** et le module **ESP-01** ne fonctionne uniquement qu'en 3.3V.

{nbsp}

====  Flashage du module ESP-01 [small]#(link:http://www.esp8266.nu/index.php/Tutorial_ESPEasy_Firmware_Upload[Tutorial ESPEasy Firmware Upload])#
 
* Installation de l'outils de "flashage" pour Linux


---------------------------------------------------------------------------------------------------
# pip install esptool  (voir doc sur https://github.com/themadinventor/esptool)
---------------------------------------------------------------------------------------------------

* Appuie sur bouton **RESET** puis **FLASH**
* Relacher **RESET** et rester sur **FLASH** pendant la programmation

---------------------------------------------------------------------------------------------------
$ esptool.py --port /dev/ttyUSB0 write_flash 0x00000 ESPEasy_R78_512.bin
esptool.py v1.0.1
Connecting...
Erasing flash...
Took 1.83s to erase flash block
Wrote 376832 bytes at 0x00000000 in 36.2 seconds (83.4 kbit/s)...
---------------------------------------------------------------------------------------------------

* Se connecter sur l'AP Wifi **ESP_0** du module, password '**configesp**', ouvrir le naviguateur et suivre les menus de configuration (link:http://www.esp8266.nu/index.php/EasySetup[EasySetup])
* Se rendre sur la page Web du module pour le configurer link:http://www.esp8266.nu/index.php/ESPEasy#ESP_Easy_web_interface[ESP_Easy_web_interface]

* Suivre l'état du module en écoutant sur son port série

---------------------------------------------------------------------------------------------------
$ picocom --omap lfcrlf -b 115200 -d 8 -f n -p n /dev/ttyUSB0           
picocom v1.7
...
INIT : Booting Build nr:78
WIFI : No SSID!
INIT : I2C
INIT : Boot OK
INIT : Reboot from deepsleep
WD   : Uptime 0 ConnectFailures 0 FreeMem 25032
WD   : Uptime 1 ConnectFailures 0 FreeMem 25000
---------------------------------------------------------------------------------------------------


{nbsp}

==== Page principale du module

image::images/esp8266-01_gui_1.png[caption="", title="", alt="", width="400", link="images/esp8266-01_gui_1.png"]


{nbsp}

== Utiliser l'ESP-01 sous Domogik

link:http://www.domogik.org/fr/[Domogik] est une solution de Domotique libre (GPLv3). 

Deux possiblités pour utiliser les modules espeasy sous Domogik.

* En utlisant le link:https://github.com/vdomos/domogik-plugin-mqtt[plugin MQTT] (necessite d'avoir un broquer MQTT comme Mosquitto d'installé sur le réseau)
* En utilisant le link:https://github.com/vdomos/domogik-plugin-vdevice[plugin Vdevice], le module esp va directement mettre à jour les senseurs dans Domogik.




{nbsp}

=== Avec le plugin MQTT

{nbsp}

==== Configuration sur l'ESP:

Dans la page "**Config**", choisir le protocole "**OpenHAB MQTT**" et renseigner l'adresse IP et port du broquer MQTT.

image::images/esp8266-01_gui_2.png[caption="", title="", alt="", width="400", link="images/esp8266-01_gui_2.png"]


{nbsp}

==== Ajout d'un device sur l'ESP

Exemple avec une sonde de température/Humidité DHT22:

image::images/esp8266-01_gui_3.png[caption="", title="", alt="", width="800", link="images/esp8266-01_gui_3.png"]

Renseigner:

* Le "**Device**", ici "Temperature & Humidity - DHT"
* Le "**1st GPIO**" où est connecté le DHT22, 
* Le nom du device ("**Name**"), ce nom sera visible dans les messages MQTT.
* Le "**IDX/Var**" doit être mis à une valeur unique quelconque != de '0'
* Le "**DHT Type**", ici un DHT22 est utlisé


Voici comment vont apparaitre les messages MQTT renvoyer par le module esp-01 (Topic /esp-01-2/dht22):
---------------------------------------------------------------------------------------------------
2016-05-09 00:22:23,592  0  /esp-01-2/dht22/Temperature  23.10
2016-05-09 00:22:23,633  0  /esp-01-2/dht22/Humidity  42.70
---------------------------------------------------------------------------------------------------


Il est possible de changer le topic publié dans la page "Tools/Advanced" en modifiant le "Publish Template:"

image::images/esp8266-01_gui_7.png[caption="", title="", alt="", width="800", link="images/esp8266-01_gui_7.png"]


{nbsp}

==== Ajout d'un device MQTT dans Domogik

Dans Domogik, il suffira de créer un "device" de type "sensor" avec le Topic correspondant dans le plugin MQTT:

image::images/esp8266-01_mqtt_1.png[caption="", title="", alt="", width="800", link="images/esp8266-01_mqtt_1.png"]



{nbsp}

=== Avec le plugin VDevice


{nbsp}

==== Configuration sur l'ESP:

{nbsp}

===== Dans la page "**Config**"

Choisir le protocole "**Generic HTTP**" et renseigner l'adresse IP et le port du serveur Domogik.

image::images/esp8266-01_gui_4.png[caption="", title="", alt="", width="400", link="images/esp8266-01_gui_4.png"]

{nbsp}

===== Dans la page "**Tools/Advanced**"

Renseigner:

* le "Publish Template:" avec l'URL domogik pour le plugin Vdevice de Domogik. Les variables "id" et "value" seront initialisées en fonction du "device" déclaré sur l'ESP-01. 
* le "Message Delay (ms)" pour limiter la fréquence de mise à jour sur Domogik.

image::images/esp8266-01_gui_6.png[caption="", title="", alt="", width="800", link="images/esp8266-01_gui_6.png"]




{nbsp}

==== Ajout d'un "device input" **MCP23017** sur l'ESP

Exemple avec un circuit d'entrées/sorties **I2C** link:http://www.microchip.com/wwwproducts/en/MCP23017[MCP23017]:


{nbsp}

===== Dans la page "**Hardware**",

image::images/esp8266-01_gui_8.png[caption="", title="", alt="", width="400", link="images/esp8266-01_gui_8.png"]

Renseigner:

* Le GPIO utlisé pour SDA du bus i2c
* Le GPIO utlisé pour SCL du bus i2c


{nbsp}

===== Dans la page "**Devices**"

image::images/esp8266-01_gui_5.png[caption="", title="", alt="", width="800", link="images/esp8266-01_gui_5.png"]

Renseigner pour un device:

* Le "**Device**", ici "Switch MCP23017"  (voir link:http://www.esp8266.nu/index.php/MCP23017[MCP23017])
* Le nom du device ("**Name**"), non utlisé pour Domogik.
* Le "**IDX/Var**" doit correspondre à l'ID Domogik de la "Command" du device créé dans le plugin Vdevice.
* Le "**Port**" correspond à la pin du MCP23017 (1..16) pour le premier MCP.


{nbsp}

==== Ajout d'un device Vdevice dans Domogik

Dans Domogik, il suffira de créer un "device" correspondant dans le plugin Vdevice.

Ci-dessous, le **VDevice** de type binaire correspondant à l'input déclarée ci-dessus dans l'ESP (ID Command Domogik = 25 à renseigner dans IDX/Var):

image::images/esp8266-01_vdevice_1.png[caption="", title="", alt="", width="700", link="images/esp8266-01_vdevice_1.png"]


{nbsp}

Voici la log du plugin Vdevice lors de la mise à jour à chaque changement des entrées du MCP23017:

---------------------------------------------------------------------------------------------------
2016-05-22 14:35:03,089 domogik-vdevice INFO ==> Update Sensor 'virtual_binary' / id '143' with value '0.00' for device 'GPB0'
2016-05-22 14:35:05,591 domogik-vdevice INFO ==> Update Sensor 'virtual_binary' / id '143' with value '1.00' for device 'GPB0'
2016-05-22 14:52:06,365 domogik-vdevice INFO ==> Update Sensor 'virtual_binary' / id '143' with value '0.00' for device 'GPB0'
2016-05-22 14:52:24,517 domogik-vdevice INFO ==> Update Sensor 'virtual_binary' / id '143' with value '1.00' for device 'GPB0'
---------------------------------------------------------------------------------------------------


{nbsp}

==== Commander les sorties du MCP23017

Aucune configuration n'est à faire dans l'interface web du module ESP-01:

Le firmware fourni d'office une commande HTTP permettant d'agir sur les sorties du MCP23017:


---------------------------------------------------------------------------------------------------
$ wget -qO- "http://esp-01-1/control?cmd=mcpgpio,8,0" ; echo
MCPGPIO 8 Set to 0

$ wget -qO- "http://esp-01-1/control?cmd=mcpgpio,8,1" ; echo
MCPGPIO 8 Set to 1
---------------------------------------------------------------------------------------------------

{nbsp}

En utlisant le link:https://github.com/vdomos/domogik-plugin-script[plugin Script], il sera possible de piloter les sorties du MCP23017 sous Domogik:

image::images/esp8266-01_script_1.png[caption="", title="", alt="", width="700", link="images/esp8266-01_script_1.png"]


{nbsp}

'''
~22/5/2016~
